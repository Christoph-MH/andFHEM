/*
 * AndFHEM - Open Source Android application to control a FHEM home automation
 * server.
 *
 * Copyright (c) 2011, Matthias Klass or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU GENERAL PUBLIC LICENSE, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU GENERAL PUBLIC LICENSE
 * for more details.
 *
 * You should have received a copy of the GNU GENERAL PUBLIC LICENSE
 * along with this distribution; if not, write to:
 *   Free Software Foundation, Inc.
 *   51 Franklin Street, Fifth Floor
 *   Boston, MA  02110-1301  USA
 */


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.guava:guava:22.0'
    }
}

/*************************************
 * Generate resources
 *********************************** */
import com.google.common.base.Charsets
import com.google.common.base.Function
import com.google.common.base.Joiner
import com.google.common.collect.Lists
import com.google.common.io.Files
import com.google.common.io.Resources

import java.util.regex.Matcher
import java.util.regex.Pattern

import static com.google.common.collect.FluentIterable.from

class ResourceIdMapperGeneratorTask extends DefaultTask {
    @InputFile
    File inputFile

    @OutputFile
    File outputFile

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        println inputs.incremental ? "CHANGED inputs considered out of date"
                : "ALL inputs considered out of date"
        if (!inputs.incremental) {
            generateResourceIdMapper()
        }
        inputs.outOfDate { change ->
            if (change.file.name == 'strings.xml') {
                generateResourceIdMapper();
            }
        }
    }

    def generateResourceIdMapper() {
        if (!project.buildDir.exists()) {
            project.buildDir.mkdir();
        }
        String content = Resources.toString(inputFile.toURI().toURL(), Charsets.UTF_8);

        List<String> matches = Lists.newArrayList();
        Pattern pattern = Pattern.compile("<string name=\"([^\"]+)");
        Matcher matcher = pattern.matcher(content);

        while (matcher.find()) {
            matches.add(matcher.group(1));
        }

        String toWrite = "package li.klass.fhem.resources;\n" + "import li.klass.fhem.R;\n" + "public enum ResourceIdMapper {" + from(matches).transform(new Function<String, String>() {
            @Override
            String apply(String input) {
                return input + "(R.string." + input + ")";
            }
        }).join(Joiner.on(",\n")) + ",none(-1);\n" +
                "private int id;\n" +
                "private ResourceIdMapper(int id) {\n" +
                "this.id = id;\n" +
                "}\n" +
                "public int getId() {\n" +
                "return id;\n" +
                "}}";
        outputFile.getParentFile().mkdirs()

        println("writing ResourceIdMapper.java to " + outputFile.getAbsolutePath())

        Files.write(toWrite.getBytes(Charsets.UTF_8), outputFile)
    }
}

task generateResourceIdMapper(type: ResourceIdMapperGeneratorTask) {
    inputFile = file('src/main/res/values/strings.xml')
    outputFile = file('src/gen/java/li/klass/fhem/resources/ResourceIdMapper.java')
}
tasks["preBuild"].dependsOn('generateResourceIdMapper')
