import com.google.common.base.Charsets
import com.google.common.io.Files
import com.google.common.io.Resources

/*
 * AndFHEM - Open Source Android application to control a FHEM home automation
 * server.
 *
 * Copyright (c) 2011, Matthias Klass or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU GENERAL PUBLIC LICENSE, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU GENERAL PUBLIC LICENSE
 * for more details.
 *
 * You should have received a copy of the GNU GENERAL PUBLIC LICENSE
 * along with this distribution; if not, write to:
 *   Free Software Foundation, Inc.
 *   51 Franklin Street, Fifth Floor
 *   Boston, MA  02110-1301  USA
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.guava:guava:22.0'
    }
}

class ResetWhatsNewTask extends DefaultTask {
    @InputFile
    File whatsnewFileEn
    @InputFile
    File whatsnewFileDe

    @OutputDirectories
    List<File> toUpdate


    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        clear(whatsnewFileDe)
        clear(whatsnewFileEn)
    }

    private def clear(file) {
        file.delete()
        Files.asCharSink(file, Charsets.UTF_8).write("TODO")

        delete("de-DE")
        delete("en-US")
    }

    private def delete(locale) {
        toUpdate.each {
            def targetFile = new File(it.getAbsolutePath() + "/$locale/whatsnew")
            targetFile.delete()
        }
    }
}

class WhatsNewTask extends DefaultTask {
    @InputFile
    File whatsnewFileEn
    @InputFile
    File whatsnewFileDe

    @OutputDirectories
    List<File> toUpdate

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        allOutputDirectoriesExist()
    }

    private def allOutputDirectoriesExist() {
        def notExisting = toUpdate.findAll { !it.exists() }
        def notExistingPaths = notExisting.{
            it.getAbsolutePath()
        }
        if (!notExisting.isEmpty()) {
            throw new IllegalArgumentException("output directories $notExistingPaths must exist")
        }

        writeContentTo("de-DE", whatsnewFileDe)
        writeContentTo("en-US", whatsnewFileEn)
    }

    private def writeContentTo(locale, changedFile) {
        String content = Resources.toString(changedFile.toURI().toURL(), Charsets.UTF_8);
        if (content.isEmpty() || content.contains("TODO")) {
            throw new IllegalArgumentException("changelog must be filled, changedFile=" + changedFile.getAbsolutePath())
        }
        if (content.length() > 400) {
            content = content.substring(0, 400) + "...\r\nhttp://andfhem.klass.li/changelog/"
        }

        toUpdate.each {
            def targetFile = new File(it.getAbsolutePath() + "/$locale/whatsnew")
            targetFile.delete()
            Files.asCharSink(targetFile, Charsets.UTF_8).write(content)
        }
    }
}

task generateWhatsNew(type: WhatsNewTask) {
    whatsnewFileDe = file('app/whatsnew-de.md')
    whatsnewFileEn = file('app/whatsnew-en.md')
    toUpdate = [file('app/src/inapp/play'), file('app/src/premium/play')]
}

task resetWhatsNew(type: ResetWhatsNewTask) {
    whatsnewFileDe = file('app/whatsnew-de.md')
    whatsnewFileEn = file('app/whatsnew-en.md')
    toUpdate = [file('app/src/inapp/play'), file('app/src/premium/play')]
}