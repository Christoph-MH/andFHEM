/*
 * AndFHEM - Open Source Android application to control a FHEM home automation
 * server.
 *
 * Copyright (c) 2011, Matthias Klass or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU GENERAL PUBLIC LICENSE, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU GENERAL PUBLIC LICENSE
 * for more details.
 *
 * You should have received a copy of the GNU GENERAL PUBLIC LICENSE
 * along with this distribution; if not, write to:
 *   Free Software Foundation, Inc.
 *   51 Franklin Street, Fifth Floor
 *   Boston, MA  02110-1301  USA
 */

def appVersionCode = 458
def appVersionName = "4.5.8"

ext {
    supportLibVersion = '25.3.1'
    firebaseVersion = '10.2.6'
    buildProperties = getBuildProperties()
    anko_version = '0.10.1'
}

buildscript {
    ext.kotlin_version = '1.1.2-3'
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'

        classpath 'com.github.jcandksolutions.gradle:android-unit-test:2.1.1'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'de.mobilej.unmock:UnMockPlugin:0.6.2'
        classpath 'co.riiid:gradle-github-plugin:0.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:3.0.0'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://dl.bintray.com/mamohr/maven' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'http://partnerdemo.artifactoryonline.com/partnerdemo/snapshots' }
    maven { url "https://jitpack.io" }
}

apply plugin: 'com.android.application'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'co.riiid.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    testBuildType 'debug'
    compileOptions.incremental = true

    testOptions {
        unitTests.returnDefaultValues = true
    }

    dexOptions {
        javaMaxHeapSize "3000M"
    }

    defaultConfig {
        targetSdkVersion 25
        minSdkVersion 14
        testApplicationId "li.klass.fhem.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        versionCode appVersionCode
        versionName appVersionName
    }

    compileOptions {
        encoding 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file("release.keystore")
            keyAlias "android"
            storePassword ""
            keyPassword ""
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-production.txt'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
        }
    }

    sourceSets {
        androidTest {
            aidl.srcDirs = ['src/androidTest/java']
        }
        test {
            java.srcDirs = ['src/test/java']
            resources.srcDir file('src/test/resources')
        }
        main {
            aidl.srcDirs = ['src/main/aidl']
            java.srcDirs = ['src/main/java', 'src/gen/java']
            resources.srcDir file('src/gen/resources')
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'APK LICENSE.txt'
        exclude 'LICENSE.txt'
    }

    productFlavors {
        inapp {
            applicationId "li.klass.fhem"
        }
        premium {
            applicationId "li.klass.fhempremium"
        }
    }

    // TODO resolve errors and remove this
    lintOptions {
        disable 'IconColors'
        disable 'IconDipSize'
        disable 'IconLocation'
        disable 'IconDensities'
        abortOnError false
    }
}

kotlin {
    experimental { coroutines 'enable' }
}

github {
    owner = 'klassm'
    repo = 'andFHEM'
    token = buildProperties['githubToken'] ?: "??"
    tagName = appVersionName
    targetCommitish = 'master'
    name = appVersionName
    body = "Release ${appVersionName}"
    assets = [
            'build/outputs/apk/workspace-inapp-release.apk'
    ]
}

project.gradle.taskGraph.whenReady {
    connectedAndroidTest {
        ignoreFailures = true
    }
}

unMock {
    // classes to keep
    // matched by "startsWith" - you also need to include the dependencies manually
    // if you start with an "-" the class will match by "equals" (and it will additionally  match
    // inner classes of this class)
    keep = [
            "android.text.TextUtils",
            "android.util.",
            "android.text.",
            "android.content.ContentValues",
            "android.content.Intent",
            "-android.content.IIntentReceiver",
            "-android.location.Location",
            "android.content.res.Configuration",
            "org.",
            "libcore.",
            "com.android.internal.R",
            "com.android.internal.util.",
            "android.os.ShellCommand"
    ]
}

dependencies {
    unmock 'org.robolectric:android-all:7.0.0_r1-robolectric-0'

    compile fileTree(dir: './libs', include: '*.jar')
    //noinspection GradleDependency
    compile "com.google.firebase:firebase-appindexing:${firebaseVersion}"
    compile "com.google.firebase:firebase-messaging:${firebaseVersion}"
    compile "com.google.firebase:firebase-ads:${firebaseVersion}"
    compile 'commons-net:commons-net:3.3'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.google.guava:guava:20.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'
    provided 'javax.annotation:jsr250-api:1.0'
    compile('com.google.http-client:google-http-client-android:1.22.0') {
        exclude group: 'com.google.code.findbugs'
        exclude group: 'org.apache.httpcomponents'
    }
    compile 'com.github.angads25:filepicker:1.1.0'

    compile 'joda-time:joda-time:2.4'
    //noinspection GradleDependency
    compile 'org.slf4j:slf4j-android:1.7.12'
    compile 'org.apmem.tools:layouts:1.10@aar'
    compile project(':external-dep')
    compile 'net.lingala.zip4j:zip4j:1.3.2'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.1'
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:percent:${supportLibVersion}"
    compile "com.android.support:support-annotations:${supportLibVersion}"
    compile 'com.google.errorprone:error_prone_annotations:2.0.18'
    compile 'com.google.j2objc:j2objc-annotations:1.3'

    // Anko Layouts
    compile "org.jetbrains.anko:anko-sdk25:$anko_version"
    // sdk15, sdk19, sdk21, sdk23 are also available
    compile "org.jetbrains.anko:anko-appcompat-v7:$anko_version"

    // Coroutine listeners for Anko Layouts
    compile "org.jetbrains.anko:anko-sdk25-coroutines:$anko_version"
    compile "org.jetbrains.anko:anko-appcompat-v7-coroutines:$anko_version"
    compile "org.jetbrains.anko:anko-coroutines:$anko_version"

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:2.8.9'
    testCompile 'com.tngtech.java:junit-dataprovider:1.9.3'
    testCompile 'org.assertj:assertj-core:1.7.1'
    testCompile('org.assertj:assertj-guava:1.3.1') {
        exclude group: 'com.google.guava'
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

task readSigningPasswordsFromConsole(
        dependsOn: ['readSigningStorePasswordFromConsole', 'readSigningKeyAliasPasswordFromConsole'])

task readSigningStorePasswordFromConsole << {
    def storePassword = getBuildProperty("storePassword");
    if (!storePassword) {
        storePassword = readFromConsole("Store password")
    }
    android.signingConfigs.release.storePassword = storePassword
}

task readSigningKeyAliasPasswordFromConsole << {
    def aliasPassword = getBuildProperty("aliasPassword");
    if (!aliasPassword) {
        aliasPassword = readFromConsole("Alias / Google Sites password")
    }
    android.signingConfigs.release.keyPassword = aliasPassword
}

tasks.whenTaskAdded { task ->
    if (task.name == 'packageInappRelease' || task.name == 'packagePremiumRelease') {
        task.dependsOn readSigningPasswordsFromConsole
    }
}

task release(dependsOn: ['testInappDebugUnitTest', 'assembleRelease', 'uploadToGoogleSites']) << {}

def readFromConsole(String prompt) {
    def console = System.console()
    return new String(console.readPassword('\n\n' + prompt + '\n> '))
}

task artifacts {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        println "  Project:" + project.name
        project.configurations.each { conf ->
            println "    Configuration: ${conf.name}"
            conf.allDependencies.each { dep ->
                println "      ${dep.group}:${dep.name}:${dep.version}"
            }
        }
    }
}

def getBuildProperty(String key) {
    return getBuildProperties().get(key)
}

def getBuildProperties() {
    def props = new Properties()
    def file = new File(System.getProperty("user.home") + "/andFHEM.properties")
    if (file.exists()) {
        file.withInputStream {
            stream -> props.load(stream)
        }
    }
    return props
}

android.applicationVariants.all { variant ->
    task("javadoc${variant.name}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        failOnError false
    }
}

apply from: 'build-includes/test-resources.gradle'
apply from: 'build-includes/resource-id-mapper-generator.gradle'
apply from: 'build-includes/device-configuration-generator.gradle'