/*
 * AndFHEM - Open Source Android application to control a FHEM home automation
 * server.
 *
 * Copyright (c) 2011, Matthias Klass or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU GENERAL PUBLIC LICENSE, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU GENERAL PUBLIC LICENSE
 * for more details.
 *
 * You should have received a copy of the GNU GENERAL PUBLIC LICENSE
 * along with this distribution; if not, write to:
 *   Free Software Foundation, Inc.
 *   51 Franklin Street, Fifth Floor
 *   Boston, MA  02110-1301  USA
 */


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.guava:guava:18.0'
    }
}

/*************************************
 * Generate resources
 *********************************** */
import com.google.common.base.Charsets
import com.google.common.io.Files
import com.google.common.io.Resources

class DeviceConfigurationTask extends DefaultTask {
    @InputDirectory
    def File inputDir

    @OutputDirectory
    def File outputDir

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        println inputs.incremental ? "CHANGED inputs considered out of date"
                : "ALL inputs considered out of date"
        assembleDeviceConfigurationJson()
    }

    def assembleDeviceConfigurationJson() {
        def fileContentToString = { File file ->
            def type = file.name.replace(".json", "")
            "\"" + type + "\":" + Resources.toString(file.absoluteFile.toURI().toURL(), Charsets.UTF_8) + ""
        }
        def content = "{" + inputDir.listFiles().collect(fileContentToString).join(",") + "}"

        def outputFile = new File(outputDir.getAbsolutePath() + "/deviceConfiguration.json");
        outputFile.getParentFile().mkdirs()

        Files.write(content.getBytes(Charsets.UTF_8), outputFile);
    }
}

task buildDeviceConfigurationJson(type: DeviceConfigurationTask) {
    inputDir = file('src/main/resources/deviceConfiguration')
    outputDir = file('src/gen/resources/li/klass/fhem/update/backend/device/configuration')
}
tasks["preBuild"].dependsOn('buildDeviceConfigurationJson')
